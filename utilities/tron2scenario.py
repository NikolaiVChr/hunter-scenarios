import json
import argparse
from osm2city.utils.utilities import FGElev
import ast

parser = argparse.ArgumentParser()
parser.add_argument('path', help='path to TronView .txt or .json file')
parser.add_argument('--ident', '-i', help='Identifier of the scenario', default='TronView')
parser.add_argument('--name', '-n', help='Human readable name of the scenario', default='TronView')
parser.add_argument('--desc', '-d', help='Short description od the scenario',
                    default='Scenario automatically generated by tron2scenario.py script')
parser.add_argument('--verbose', '-v', help='Increase verbosity', action='store_true')
parser.add_argument('--latLL', help='Lower left corner of the bounding box', type=float, metavar='LAT')
parser.add_argument('--lonLL', help='Lower left corner of the bounding box', type=float, metavar='LAT')
parser.add_argument('--latUR', help='Upper right corner of the bounding box', type=float, metavar='LON')
parser.add_argument('--lonUR', help='Upper right corner of the bounding box', type=float, metavar='LON')
parser.add_argument('--icao', help='ICAO code of center airport', type=str, metavar='ICAO', required=True)
parser.add_argument('--output', '-o', help='path to where output should be placed (filename is automatic',
                    type=str, metavar='PATH', default='')
args = parser.parse_args()


def vprint(*txt):
    if args.verbose:
        print(*txt)


with open(args.path) as jf:
    tron = json.loads(jf.read())

ft2m = 0.3048
bbx_ll = (args.lonLL, args.latLL)
bbx_ur = (args.lonUR, args.latUR)
bbc = False
changed = False

vprint('Probing terrain...')
fg_elev = FGElev(None, 0)

of = open(args.output + 'scenario_' + args.ident + '.py', 'w')
of.write('# This scenario was automatically generated by tron2scenario.py\n')
of.write('import hunter.geometry as g\n')
of.write('import hunter.mp_targets as mpt\n')
of.write('from hunter.scenarios import ScenarioContainer, StaticTarget\n\n\n')
of.write('def build_scenario(path: str) -> ScenarioContainer:\n')
of.write('    static_targets = [\n')
for t in tron['data']['scenario']['steerpoints']:
    if t['route'] != 0 or t['type'] == 'Enemy Airfield':
        continue
    # alt = t['elevation']
    lat = float(t['position']['latitude'])
    lon = float(t['position']['longitude'])
    if None in bbx_ll:
        bbx_ll = (lon, lat)
        bbc = True
        changed = True
    else:
        if bbx_ll[0] > lon:
            bbx_ll = (lon, bbx_ll[1])
            bbc = True
            changed = True
        if bbx_ll[1] > lat:
            bbx_ll = (bbx_ll[0], lat)
            bbc = True
            changed = True
    if None in bbx_ur:
        bbx_ur = (lon, lat)
        bbc = True
        changed = True
    else:
        if bbx_ur[0] < lon:
            bbx_ur = (lon, bbx_ur[1])
            bbc = True
            changed = True
        if bbx_ur[1] < lat:
            bbx_ur = (bbx_ur[0], lat)
            bbc = True
            changed = True
    if changed:
        vprint('Bounding box changed to', bbx_ll, bbx_ur)
        changed = False
    aircraft = 'DEPOT'
    hdg = 0
    priority = 0
    try:
        remarks = ast.literal_eval(t['remarks'])
        if 'type' in remarks:
            aircraft = remarks['type']
        if 'heading' in remarks:
            hdg = float(remarks['heading'])
        if 'priority' in remarks:
            priority = remarks['priority']
    except Exception as e:
        print('Exception occured:', e)
    of.write(' ' * 8 + 'StaticTarget(mpt.MPTarget.' + aircraft +
             ', g.Position(' + str(lon) + ', ' + str(lat) + ', ' +
             str(fg_elev.probe_elev((lon, lat), True)) + '), ' + str(hdg) +
             ', ' + str(priority) + '),\n')
of.write('    ]\n')
line = '    scenario = ScenarioContainer(\'' + args.ident + '\', \'' + args.name + '\', \'' + args.desc + '\', '

of.write(line + str(bbx_ll) + ', ' + str(bbx_ur) + ", '" + args.icao + "')\n")
of.write('    scenario.add_static_targets(static_targets)\n')
of.write('    return scenario\n')

of.close()
if args.verbose:
    print('Final code:\n\n')
    with open('scenario_' + args.ident + '.py') as f:
        for a in f.readlines():
            print(a[:-1])
    print('\n\n')

if bbc:
    print('final bounding box:', bbx_ll, bbx_ur)
